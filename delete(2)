{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "48f63d36",
   "metadata": {},
   "source": [
    "# Session 2: Classes, Objects, and Game Graphics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6967f4cb",
   "metadata": {},
   "source": [
    "## üéØ Objectives\n",
    "By the end of this session, you will be able to:\n",
    "- Understand the concept of classes and objects\n",
    "- Define your own classes and create instances\n",
    "- Understand attributes and methods\n",
    "- Use classes to organize a game character in Pygame\n",
    "- Set up a game loop to refresh the screen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a38268",
   "metadata": {},
   "source": [
    "## üìò 1. Introduction to Object-Oriented Programming (OOP)\n",
    "Python allows us to write reusable, organized code using **classes**. A class is a blueprint for creating objects.\n",
    "\n",
    "### Key Concepts:\n",
    "- **Class**: A blueprint (like `Car`, `Hero`, `Enemy`)\n",
    "- **Object**: An actual item created from the class (like `batman`, `enemy1`)\n",
    "- **Attributes**: Variables that belong to an object\n",
    "- **Methods**: Functions that belong to an object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19cc979d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example 1: Basic Class Example\n",
    "class Dog:\n",
    "    def __init__(self, name, breed):\n",
    "        self.name = name\n",
    "        self.breed = breed\n",
    "\n",
    "    def bark(self):\n",
    "        print(f\"{self.name} says: Woof!\")\n",
    "\n",
    "my_dog = Dog(\"Rex\", \"German Shepherd\")\n",
    "my_dog.bark()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0b8dc93",
   "metadata": {},
   "source": [
    "### ‚úÖ Practice:\n",
    "Create a class called `Cat` with attributes `name` and `color`. Add a method `meow()` that prints a message with the cat‚Äôs name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c9ab6e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code here:\n",
    "# class Cat:\n",
    "#     def __init__(...):\n",
    "#         ...\n",
    "#     def meow(self):\n",
    "#         ..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2013e688",
   "metadata": {},
   "source": [
    "## üß± 2. Custom Classes for Game Objects\n",
    "Let's define a class for a generic game character that stores `x`, `y` coordinates and color, and can draw itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9970d45d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: A visual shape class (without Pygame)\n",
    "class Shape:\n",
    "    def __init__(self, x, y, color):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.color = color\n",
    "\n",
    "    def describe(self):\n",
    "        print(f\"Shape at ({self.x}, {self.y}) with color {self.color}\")\n",
    "\n",
    "circle = Shape(10, 20, 'red')\n",
    "circle.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eff5a47",
   "metadata": {},
   "source": [
    "## üïπÔ∏è 3. Pygame Game Setup and Car Class\n",
    "Now let's bring in Pygame and build a `Car` class that shows Batman on the screen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05f7b56c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "pygame.init()\n",
    "screen = pygame.display.set_mode((800, 600))\n",
    "pygame.display.set_caption(\"Batman Collector\")\n",
    "\n",
    "# Load image\n",
    "batman_img = pygame.image.load(\"batman.png\")\n",
    "batman_img = pygame.transform.scale(batman_img, (30, 30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3073e6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Car:\n",
    "    def __init__(self, x, y, image):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.image = image\n",
    "\n",
    "    def draw(self, screen):\n",
    "        screen.blit(self.image, (self.x, self.y))\n",
    "\n",
    "player = Car(100, 100, batman_img)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "619a4583",
   "metadata": {},
   "source": [
    "## üîÑ 4. Game Loop to Refresh Display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04721046",
   "metadata": {},
   "outputs": [],
   "source": [
    "clock = pygame.time.Clock()\n",
    "running = True\n",
    "\n",
    "while running:\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "\n",
    "    screen.fill((0, 0, 0))  # Clear screen\n",
    "    player.draw(screen)\n",
    "    pygame.display.flip()  # Refresh screen\n",
    "    clock.tick(60)\n",
    "\n",
    "pygame.quit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a98a69da",
   "metadata": {},
   "source": [
    "## üß† Recap:\n",
    "- A **class** defines what an object should have and do.\n",
    "- We used attributes (`self.x`, `self.image`) and methods (`draw()`, `bark()`).\n",
    "- In games, objects are easier to manage using classes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f44c8fab",
   "metadata": {},
   "source": [
    "### ‚úÖ Final Challenge:\n",
    "1. Create a class `Enemy` with coordinates and a `draw()` method (you can use `pygame.draw.rect()` if no image).\n",
    "2. Create two enemies and draw them on the screen with the player.\n",
    "\n",
    "Good luck!"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
